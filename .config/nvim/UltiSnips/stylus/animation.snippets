global !p
import snippets
anidi_props = {
	'n': 'normal',
	'r': 'reverse',
	'a': 'alternate',
	'ar': 'alternate-reverse'
}
anifm_props = {
	'n': 'none',
	'f': 'forwards',
	'b': 'backwards',
	'bo': 'both'
}
anips_props = {
	'p': 'paused',
	'r': 'running'
}
endglobal

# @keyframes
snippet key "@keyframes {}"
@keyframes ${1:<name>} {
	${0:<key-frames>}
}
endsnippet

# animation:
snippet ani "animation: _" b
animation: $0
endsnippet

# animation-delay:
snippet anid "animation-delay: _" b
animation-delay: $0
endsnippet
# animation-delay: {number}{unit}
snippet /anid((?:\d*\.)?\d+)(m?s)?/ "anid160, anid2s, anid.8s, etc." rb
animation-delay: `!p snip.rv = snippets.unit(*match.group(1, 2), 'ms')`
$0
endsnippet

# animation-direction:
snippet anidi "animation-direction: _" b
animation-direction: $0
endsnippet
# animation-direction: {prop}
snippet /anidi;(n|r|ar?)/ "anidi;(n|r|a|ar) => animation-direction: (normal|reverse|alternate|alternate-reverse)" rb
animation-direction: `!p snip.rv = anidi_props[match.group(1)]`
$0
endsnippet

# animation-duration:
snippet anidu "animation-duration: _" b
animation-duration: $0
endsnippet
# animation-duration: {number}{unit}
snippet /anidu((?:\d*\.)?\d+)(m?s)?/ "anidu60, anidu2s, anidu.8s, etc." rb
animation-duration: `!p snip.rv = snippets.unit(*match.group(1, 2), 'ms')`
$0
endsnippet

# animation-fill-mode:
snippet anifm "animation-fill-mode: _" b
animation-fill-mode: $0
endsnippet
# animation-fill-mode: {prop}
snippet /anifm;(n|f|bo?)/ "anifm;(n|f|b|bo) => animation-fill-mode: (none|forwards|backwards|both)" rb
animation-fill-mode: `!p snip.rv = anifm_props[match.group(1)]`
$0
endsnippet

# animation-iteration-count:
snippet aniic "animation-iteration-count: _" b
animation-iteration-count: $0
endsnippet
# animation-iteration-count: {prop}
snippet /aniic;i/ "aniic;(i) => animation-iteration-count: (infinite)" rb
animation-iteration-count: infinite
$0
endsnippet
# animation-iteration-count: {number}
snippet /aniic(\d+)/ "aniic2, etc." rb
animation-iteration-count: `!p snip.rv = match.group(1)`
$0
endsnippet

# animation-name:
snippet anin "animation-name: _" b
animation-name: $0
endsnippet

# animation-play-state:
snippet anips "animation-play-state: _" b
animation-play-state: $0
endsnippet
# animation-play-state: {prop}
snippet /anips;(p|r)/ "anips;(p|r) => animation-play-state: (paused|running)" rb
animation-play-state: `!p snip.rv = anips_props[match.group(1)]`
$0
endsnippet

# animation-timing-function:
snippet anitf "animation-timing-function: _" b
animation-timing-function: $0
endsnippet

# transition:
snippet tran "transition: _" b
transition: ${0:<property> <duration> [<timing-function>] [<delay>]}
endsnippet

# transition-delay:
snippet trande "transition-delay: _" b
transition-delay: $0
endsnippet

# transition-duration:
snippet trandu "transition-duration: _" b
transition-duration: $0
endsnippet

# transition-property:
snippet tranp "transition-property: _" b
transition-property: $0
endsnippet

# transition-timing-function:
snippet trantf "transition-timing-function: _" b
transition-timing-function: $0
endsnippet
