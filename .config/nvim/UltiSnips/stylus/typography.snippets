global !p
import snippets
fost_props = {
	'i': 'italic',
	'o': 'oblique'
}
hyp_props = {
	'a': 'auto',
	'm': 'manual',
	'n': 'none'
}
ta_props = {
  'c': 'center',
  'j': 'justify',
  'l': 'left',
  'r': 'right'
}
tdl_props = {
	'n': 'none',
	'u': 'underline',
	'o': 'overline',
	'lt': 'line-through'
}
to_props = {
	'c': 'clip',
	'e': 'ellipsis'
}
tt_props = {
	'n': 'none',
	'c': 'capitalize',
	'l': 'lowercase',
	'u': 'uppercase'
}
va_props = {
  'b': 'bottom',
  'bl': 'baseline',
  'm': 'middle',
  'sub': 'sub',
  'sup': 'super',
  't': 'top',
  'tb': 'text-bottom',
  'tt': 'text-top'
}
ws_props = {
  'n': 'normal',
  'nw': 'nowrap',
  'p': 'pre',
  'pl': 'pre-line',
  'pw': 'pre-wrap'
}
wob_props = {
  'n': 'normal',
  'ba': 'break-all',
  'bw': 'break-word',
  'ka': 'keep-all'
}
wow_props = {
  'n': 'normal',
  'b': 'break-word'
}
endglobal

# @font-face
snippet font "@font-face {}" b
@font-face {
	$0
}
endsnippet

# caret-color:
snippet cac "caret-color: _" b
caret-color: $0
endsnippet

# column-count:
snippet colc "column-count: _" b
column-count: $0
endsnippet

# column-fill:
snippet colf "column-fill: _" b
column-fill: ${0:auto}
endsnippet

# column-gap:
snippet colg "column-gap: _" b
column-gap: $0
endsnippet

# column-rule:
snippet colr "column-rule: _" b
column-rule: ${1:width} ${2:style} ${3:color}$0
endsnippet

# column-rule-color:
snippet colrc "column-rule-color: _" b
column-rule-color: $0
endsnippet

# column-rule-style:
snippet colrs "column-rule-style: _" b
column-rule-style: ${0:none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset}
endsnippet

# column-rule-width:
snippet colrw "column-rule-width: _" b
column-rule-width: $0
endsnippet

# column-span:
snippet colsp "column-span: _" b
column-span: $0
endsnippet

# column-width:
snippet colw "column-width: _" b
column-width: $0
endsnippet

# columns:
snippet cols "columns: _" b
columns: ${0:width count}
endsnippet

# content:
snippet con "content: _" b
content: ${0:none|string|counter|attr()|url()}
endsnippet

# counter-increment:
snippet coui "counter-increment" b
counter-increment: $0
endsnippet

# counter-reset:
snippet cour "counter-reset" b
counter-reset: $0
endsnippet

# direction:
snippet dir "direction: _" b
direction: ${0:rtl}
endsnippet

# font:
snippet fo "font: _" b
font: ${0:<style> <variant> <weight> <size/[line-height]> <family>}
endsnippet

# font-family:
snippet fof "font-family: _" b
font-family: $0
endsnippet

# font-kerning:
snippet fok "font-kerning: _" b
font-kerning: $0
endsnippet

# font-size:
snippet fos "font-size: _" b
font-size: $0
endsnippet

# font-size-adjust:
snippet fosa "font-size-adjust: _" b
font-size-adjust: $0
endsnippet

# font-style:
snippet fost "font-style: _" b
font-style: $0
endsnippet
# font-style: {prop}
snippet /fost;(i|o)/ "fost;(i|o) => font-style: (italic|oblique)" rb
font-style: `!p snip.rv = fost_props[match.group(1)]`
endsnippet

# font-variant:
snippet fov "font-variant: _" b
font-variant: ${1:small-caps}$0
endsnippet

# font-weight:
snippet fow "font-weight: _" b
font-weight: $0
endsnippet

# hyphens:
snippet hyp "hyphens: _" b
hyphens: ${0:auto|manual|none}
endsnippet
# hyphens: {prop}
snippet /hyp;(a|m|n)/ "hyp;(a|m|n) => hyphens: (auto|manual|none)" rb
hyphens: `!p snip.rv = hyp_props[match.group(1)]`
$0
endsnippet

# letter-spacing:
snippet ls "letter-spacing: _" b
letter-spacing: $0
endsnippet
# letter-spacing: {number}{unit}
snippet /ls(-?(?:\d*\.)?\d+)(\w+)?/ "ls.125, ls.5e, etc" rb
letter-spacing: `!p snip.rv = snippets.unit(*match.group(1, 2))`
$0
endsnippet

# line-height:
snippet ln "line-height: _" b
line-height: $0
endsnippet
# line-height: {number}{unit}
snippet /ln(-?(?:\d*\.)?\d+)(\w+|%)?/ "ln1, ln200p, etc." rb
line-height: `!p snip.rv = snippets.unit(*match.group(1, 2), '')`
$0
endsnippet

# quotes:
snippet quo "quotes: _" b
quotes: $0
endsnippet

# tab-size:
snippet tabs "tab-size: _" b
tab-size: $0
endsnippet

# text-align:
snippet ta "text-align: _" b
text-align: $0
endsnippet
# text-align: {prop}
snippet /ta;(c|j|l|r)/ "ta;(c|j|l|r) => text-align: (center|justify|left|right)" rb
text-align: `!p snip.rv = ta_props[match.group(1)]`
$0
endsnippet

# text-align-last:
snippet tal "text-align-last: _" b
text-align-last: $0
endsnippet
# text-align-last: {prop}
snippet /tal;(c|j|l|r)/ "tal;(c|j|l|r) => text-align-last: (center|justify|left|right)" rb
text-align-last: `!p snip.rv = ta_props[match.group(1)]`
$0
endsnippet

# text-decoration:
snippet td "text-decoration: _" b
text-decoration: $0
endsnippet
# text-decoration: {prop}
snippet /td;(n|u|o|lt)/ "td;(n|u|o|lt) => text-decoration: (none|underline|overline|line-through)" rb
text-decoration: `!p snip.rv = tdl_props[match.group(1)]`
$0
endsnippet

# text-decoration-color:
snippet tdc "text-decoration-color: _" b
text-decoration-color: $0
endsnippet

# text-decoration-line:
snippet tdl "text-decoration-line: _" b
text-decoration-line: $0
endsnippet

# text-decoration-style:
snippet tds "text-decoration-style: _" b
text-decoration-style: $0
endsnippet

# text-indent:
snippet ti "text-indent: _" b
text-indent: $0
endsnippet
# text-indent: {number}{unit}
snippet /ti(-?(?:\d*\.)?\d+)(\w+)?/ "ti2e, ti-.5, etc." rb
text-indent: `!p snip.rv = snippets.unit(*match.group(1, 2))`
$0
endsnippet

# text-justify:
snippet tj "text-justify: _" b
text-justify: ${0:auto|inter-word|inter-character|none}
endsnippet

# text-overflow:
snippet to "text-overflow: _" b
text-overflow: $0
endsnippet
# text-overflow: {prop}
snippet /to;(c|e)/ "to;(c|e) => text-overflow: (clip|ellipsis)" rb
text-overflow: `!p snip.rv = to_props[match.group(1)]`
$0
endsnippet

# text-transform:
snippet tt "text-transform: _" b
text-transform: $0
endsnippet
# text-transform: {prop}
snippet /tt;(n|c|l|u)/ "tt;(n|c|l|u) => text-transform: (none|capitalize|lowercase|uppercase)" rb
text-transform: `!p snip.rv = tt_props[match.group(1)]`
$0
endsnippet

# unicode-bidi:
snippet ubd "unicode-bidi: _" b
unicode-bidi: ${0:normal|embed|bidi-override|isolate|isolate-override|plaintext}
endsnippet

# vertical-align:
snippet va "vertical-align: _" b
vertical-align: $0
endsnippet
# vertical-align: {prop}
snippet /va;(bl?|m|su[bp]|t[bt]?)/ "va;(b|bl|m|sub|sup|t|tb|tt) => vertical-align: (bottom|baseline|middle|sub|super|top|text-bottom|text-top)" rb
vertical-align: `!p snip.rv = va_props[match.group(1)]`
$0
endsnippet

# white-space:
snippet ws "white-space: _" b
white-space: $0
endsnippet
# white-space: {prop}
snippet /ws;(nw?|p[lw]?)/ "ws;(n|nw|p|pl|pw) => white-space: (normal|nowrap|pre|pre-line|pre-wrap)" rb
white-space: `!p snip.rv = ws_props[match.group(1)]`
$0
endsnippet

# line-height:
snippet lh "line-height" b
line-height: $0
endsnippet

# line-height: {number}
snippet /lh((?:\d*\.)?\d+)/ "lh1.5, lh.75, lh0, etc." rb
line-height: `!p snip.rv = match.group(1)`
$0
endsnippet

# word-break:
snippet wob "word-break: _" b
word-break: $0
endsnippet
# word-break: {prop}
snippet /wob;(n|b[aw]|ka)/ "wob;(n|ba|bw|ka) => word-break: (normal|break-all|break-word|keep-all)" rb
word-break: `!p snip.rv = wob_props[match.group(1)]`
$0
endsnippet

# word-spacing:
snippet wos "word-spacing: _" b
word-spacing: $0
endsnippet
# word-spacing: {number}{unit}
snippet /wos(-?(?:\d*\.)?\d+)(\w+)?/ "wos.5, wos-2x, etc." rb
word-spacing: `!p snip.rv = snippets.unit(*match.group(1, 2), 'em')`
$0
endsnippet

# word-wrap:
snippet wow "word-wrap" b
word-wrap: $0
endsnippet
# word-wrap: {prop}
snippet /wow;(n|b)/ "wow;(n|b) => word-wrap: (normal|break-word)" rb
word-wrap: `!p snip.rv = wow_props[match.group(1)]`
$0
endsnippet

# writing-mode
snippet writ "writing-mode: _" b
writing-mode: ${0:horizontal-tb|(vertical|sideways)-(rl|lr)}
endsnippet
