snippet ;slice "createSlice()" b
import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit'
import { AppState } from '~app/store'

export interface ${1/\w/\u$0/}State {
	hello: string
}

const initialState: ${1/\w/\u$0/}State = {
	hello: '',
}

const ${1}Slice = createSlice({
  name: '$1',
  initialState,
  reducers: {
    __sampleReducer: (
      draft,
      action: PayloadAction<string>,
    ) => {
			draft.hello = action.payload
    },
  },
})

const get${1/\w/\u$0/}SliceState: {
  (state: AppState): ${1/\w/\u$0/}State
} = state => state.$1

export const getHello = createSelector(
  get${1/\w/\u$0/}SliceState,
  state => state.hello,
)

const $1Reducer = $1Slice.reducer
export default $1Reducer

export const { __sampleReducer } = $1Slice.actions
endsnippet

snippet ;bsapi "createSlice()" b
import appApi from '~server/backstage/services/app-api'
import { USE_BACKSTAGE } from '~server/config'
import { BackstageOperation, BackstageRequestConfig } from '~server/types'

type ImportResultType = { data: string }
type ImportInputArgs = void

const importParseAtoB: {
  (v: GetBackstage_a1s_Data): ImportResultType['data']
} = v => String(v)

export type GetBackstage_a1s_Config =
  BackstageRequestConfig<'${1:/}', '${2:get}'>

export type GetBackstage_a1s_Operation =
  BackstageOperation<GetBackstage_a1s_Config>

export type GetBackstage_a1s_Data =
  GetBackstage_a1s_Operation['responses']['200']['content']['application/json']

const parse_a1s_Data: {
  (data: GetBackstage_a1s_Data): ImportResultType
} = data => ({ data: importParseAtoB(data) })

const backstage_1_Handler = appApi
  .enhanceEndpoints({
    addTagTypes: ['_a1s_'],
  })
  .injectEndpoints({
    endpoints: builder => {
      const _1s_ = USE_BACKSTAGE
        ? builder.query<ImportResultType, ImportInputArgs>({
            query: (): GetBackstage_a1s_Config => ({
              url: '$1',
              method: '$2',
              validateStatus: res => res.status === 200,
            }),
            providesTags: ['_a1s_'],
            transformResponse: (data: GetBackstage_a1s_Data) =>
              parse_a1s_Data(data),
          })
        : builder.query<ImportResultType, ImportInputArgs>({
            query: () =>
              new URL('/api/v1/_1s_', window.location.origin)
                .href,
            providesTags: ['_a1s_'],
          })

      return {
        _1s_,
      }
    },
  })

export default backstage_1_Handler
endsnippet
